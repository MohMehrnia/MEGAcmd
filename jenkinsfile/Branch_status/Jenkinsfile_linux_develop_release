pipeline {
    agent { label "docker" }

    options {
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }

    stages {
        stage('Checkout SDK'){
            steps{
                dir('sdk'){
                    checkout([
                    $class: 'GitSCM',
                    branches: [[name: "origin/${SDK_BRANCH}"]],
                    userRemoteConfigs: [[ url: "${env.GIT_URL_SDK}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                    extensions: [
                        [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"],
                        [$class: "CloneOption", depth: 1, shallow: true, noTags: false, reference: '']
                    ]
                    ])
                }
                script{
                    megacmd_sources_workspace = WORKSPACE
                    sdk_sources_workspace = "${megacmd_sources_workspace}/sdk"
                }
            }
        }
        stage("Build MEGAcmd"){
            matrix {
                axes {
                    axis {
                        name 'SANITIZERS'
                        values 'ubsan', 'asan', 'tsan'
                    }
                    axis {
                        name 'BUILD_SYSTEM'
                        values 'cmake-v2'
                    }
                }
                stages{
                    stage('Build MEGAcmd container image'){
                        options{
                            timeout(time: 3, unit: 'HOURS')
                        }
                        environment{
                            DOCKER_BUILDKIT=1
                        }
                        steps {
                            sh "docker build -t meganz/megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}:${env.BUILD_NUMBER} -f ${megacmd_sources_workspace}/build-with-docker/Dockerfile.${BUILD_SYSTEM} --build-arg=BUILD_OPT_SANITIZERS=${SANITIZERS} --ulimit=core=-1 --cpuset-cpus=0,1 -- ${megacmd_sources_workspace}"
                        }
                    }
                }
            }
        }
        stage('Test MEGAcmd') {
            matrix {
                axes {
                    axis {
                        name 'SANITIZERS'
                        values 'ubsan', 'asan', 'tsan'
                    }
                    axis {
                        name 'TYPE'
                        values 'unit', 'integration'
                    }
                }
                stages {
                    stage('Run MEGAcmd unit tests'){
                        when{
                            expression {
                                env.TYPE == "unit"
                            }
                        }
                        options{
                            timeout(time: 10, unit: 'MINUTES')
                        }
                        environment{
                            ASAN_OPTIONS='atexit=1,print_stats=1,log_path=/tmp/test-results/mega-cmd-tests-unit-asan-report'
                            TSAN_OPTIONS='log_path=/tmp/test-results/mega-cmd-tests-unit-tsan-report'
                            UBSAN_OPTIONS='log_path=/tmp/test-results/mega-cmd-tests-unit-ubsan-report'
                        }
                        steps {
                            dir('test-results') {
                                sh "docker run --user \$(id -u):\$(id -g) --env HOME=/tmp --env ASAN_OPTIONS --env TSAN_OPTIONS --rm --mount type=bind,src='${megacmd_sources_workspace}/test-results',target=/tmp/test-results -- meganz/megacmd-branchstatus-cmake-v2-${SANITIZERS}:${env.BUILD_NUMBER} /usr/bin/mega-cmd-tests-unit --gtest_output=xml:/tmp/test-results/${SANITIZERS}-mega-cmd-tests-unit.xml --gtest_shuffle"
                            }
                        }
                    }
                    stage('Run MEGAcmd integration tests'){
                        when{
                            expression {
                                env.TYPE == "integration"
                            }
                        }
                        options{
                            timeout(time: 10, unit: 'MINUTES')
                        }
                        environment{
                            MEGACMD_TEST_USER=''
                            MEGACMD_TEST_PASS=credentials('MEGACMD_TESTS_PASSWORD')
                            ASAN_OPTIONS='atexit=1,print_stats=1,log_path=/tmp/test-results/mega-cmd-tests-integration-asan-report'
                            TSAN_OPTIONS='log_path=/tmp/test-results/mega-cmd-tests-integration-tsan-report'
                            UBSAN_OPTIONS='log_path=/tmp/test-results/mega-cmd-tests-unit-integration-ubsan-report'
                        }
                        steps {
                            lock(label: 'testing_accounts_megacmd', variable: 'MEGACMD_TEST_USER', quantity: 1, resource: null){
                                dir('test-results') {
                                    script {
                                        try {
                                            sh "docker run --user \$(id -u):\$(id -g) --env HOME=/tmp --env MEGACMD_TEST_PASS --env MEGACMD_TEST_USER --env ASAN_OPTIONS --env TSAN_OPTIONS --rm --mount type=bind,src='${megacmd_sources_workspace}/test-results',target=/tmp/test-results -- meganz/megacmd-branchstatus-cmake-v2-${SANITIZERS}:${env.BUILD_NUMBER} /usr/bin/mega-cmd-tests-integration --gtest_output=xml:/tmp/test-results/${SANITIZERS}-mega-cmd-tests-integration.xml --gtest_shuffle"
                                        } catch(e) {
                                            if (env.SANITIZERS == 'tsan'){
                                                echo "${env.SANITIZERS} sanitizer build are expected to fail for now, will keep the build as successful"
                                            } else {
                                                sh "exit 1"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post{
        always{
            sh "docker image rm -- meganz/megacmd-branchstatus-cmake-v2-tsan:${env.BUILD_NUMBER} || true"
            sh "docker image rm -- meganz/megacmd-branchstatus-cmake-v2-asan:${env.BUILD_NUMBER} || true"
            sh "docker image rm -- meganz/megacmd-branchstatus-cmake-v2-ubsan:${env.BUILD_NUMBER} || true"
            junit "test-results/*san-*.xml"
            archiveArtifacts artifacts: "test-results/*"
        }

    }
}
