pipeline {
    agent { label "docker" }

    options {
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }

    stages {
        stage('Clean previous runs') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout SDK') {
            steps {
                script {
                    megacmd_scm = checkout scm
                    megacmd_branch = megacmd_scm.GIT_BRANCH
                }
                dir('sdk') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${SDK_BRANCH}"]],
                        userRemoteConfigs: [[url: "${env.GIT_URL_SDK}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1"]],
                        extensions: [
                            [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"],
                            [$class: "CloneOption", depth: 1, shallow: true, noTags: false, reference: '']
                        ]
                    ])
                }
                script {
                    megacmd_sources_workspace = WORKSPACE
                    sdk_sources_workspace = "${megacmd_sources_workspace}/sdk"
                }
            }
        }

        stage("Build and test MEGAcmd") {
            matrix {
                axes {
                    axis {
                        name 'SANITIZERS'
                        values 'ubsan', 'asan', 'tsan'
                    }
                    axis {
                        name 'BUILD_SYSTEM'
                        values 'cmake'
                    }
                }
                stages {
                    stage("Build MEGAcmd container image") {
                        options {
                            timeout(time: 3, unit: 'HOURS')
                        }
                        environment {
                            DOCKER_BUILDKIT=1
                        }
                        steps {
                            sh "docker build -t meganz/megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}:${env.BUILD_NUMBER} -f ${megacmd_sources_workspace}/build-with-docker/Dockerfile.${BUILD_SYSTEM} --build-arg=BUILD_OPT_SANITIZERS=${SANITIZERS} --ulimit=core=-1 --cpuset-cpus=0,1 -- ${megacmd_sources_workspace}"
                        }
                    }
                    stage("MEGAcmd unit tests") {
                        agent {
                            docker {
                                image "meganz/megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}:${env.BUILD_NUMBER}"
                                reuseNode true
                                args "--name megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}-${env.BUILD_NUMBER}"
                            }
                        }
                        options {
                            timeout(time: 10, unit: 'MINUTES')
                        }
                        environment {
                            ASAN_OPTIONS="atexit=1,print_stats=1,log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-unit-report"
                            TSAN_OPTIONS="log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-unit-report"
                            UBSAN_OPTIONS="log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-unit-report"
                            HOME="${megacmd_sources_workspace}/test-dir-${SANITIZERS}"
                        }
                        steps {
                            dir("test-dir-${SANITIZERS}") {
                                sh """
                                    /usr/bin/mega-cmd-tests-unit \
                                        --gtest_output=xml:${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-unit.xml \
                                        --gtest_shuffle
                                """
                            }
                        }
                        post {
                            always {
                                archiveArtifacts artifacts: "test-dir-${SANITIZERS}/.megaCmd/megacmdserver.log*", allowEmptyArchive: true
                                junit "test-dir-${SANITIZERS}/results/mega-cmd-tests-unit.xml"
                            }
                        }
                    }
                    stage("MEGAcmd integration tests") {
                        agent {
                            docker {
                                image "meganz/megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}:${env.BUILD_NUMBER}"
                                reuseNode true
                                args "--name megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}-${env.BUILD_NUMBER}"
                            }
                        }
                        options {
                            timeout(time: 1, unit: 'HOURS')
                        }
                        environment {
                            MEGACMD_TEST_USER=''
                            MEGACMD_TEST_PASS=credentials('MEGACMD_TESTS_PASSWORD')
                            ASAN_OPTIONS="atexit=1,print_stats=1,log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-integration-report"
                            TSAN_OPTIONS="log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-integration-report"
                            UBSAN_OPTIONS="log_path=${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-integration-report"
                            HOME="${megacmd_sources_workspace}/test-dir-${SANITIZERS}"
                        }
                        steps {
                            lock(label: 'testing_accounts_megacmd', variable: 'MEGACMD_TEST_USER', quantity: 1, resource: null) {
                                dir("test-dir-${SANITIZERS}") {
                                    sh """
                                        /usr/bin/mega-cmd-tests-integration \
                                            --gtest_output=xml:${megacmd_sources_workspace}/test-dir-${SANITIZERS}/results/mega-cmd-tests-integration.xml \
                                            --gtest_shuffle
                                    """
                                }
                            }
                        }
                        post {
                            always {
                                archiveArtifacts "test-dir-${SANITIZERS}/.megaCmd/megacmdserver.log*"
                                junit "test-dir-${SANITIZERS}/results/mega-cmd-tests-integration.xml"
                            }
                        }
                    }
                }
                post {
                    always {
                        sh "docker image rm -f -- meganz/megacmd-branchstatus-${BUILD_SYSTEM}-${SANITIZERS}:${env.BUILD_NUMBER} || true"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sdk_commit = sh(script: "git -C ${sdk_sources_workspace} rev-parse HEAD", returnStdout: true).trim()
                megacmd_commit = sh(script: "git -C ${megacmd_sources_workspace} rev-parse HEAD", returnStdout: true).trim()
                messageStatus = currentBuild.currentResult
                messageColor = messageStatus == 'SUCCESS'? "#00FF00": "#FF0000" //green or red
                message = """
                    Jenkins job #${BUILD_ID} ended with status '${messageStatus}'.
                    See: ${BUILD_URL}

                    SDK branch: `${SDK_BRANCH}` commit: `${sdk_commit}`
                    MEGAcmd branch: `${megacmd_branch}` commit: `${megacmd_commit}`
                """.stripIndent()
                withCredentials([string(credentialsId: 'megacmd_slack_webhook_url', variable: 'SLACK_WEBHOOK_URL')]) {
                    sh """
                        curl -X POST -H 'Content-type: application/json' --data '
                            {
                               "attachments": [
                                  {
                                      "color": "${messageColor}",
                                      "blocks": [
                                       {
                                           "type": "section",
                                           "text": {
                                                "type": "mrkdwn",
                                                "text": "${message}"
                                           }
                                       }
                                     ]
                                   }
                                ]
                            }' ${SLACK_WEBHOOK_URL}
                    """
                }
            }
        }
    }
}
